# Adapted from FPComplete's Stack Travis template.

# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

env:
  global:
  - GCC=gcc-5
  - GXX=g++-5
  - LLVM_VERSION=5.0.0

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  # This is important: LLVM takes forever to build.
  - $HOME/llvm-build-5.0.0
  - $HOME/llvm-src-5.0.0

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  - env: BUILD=stack ARGS="--resolver lts-9"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [ghc-8.0.2,gcc-5,g++-5], sources: [hvr-ghc,ubuntu-toolchain-r-test]}}

before_install:
# Using compiler above sets CC to an invalid value, so unset it
#- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:$PATH
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi
# We also need to manually build LLVM to get 5.0... ugh... (This copied from llvm-hs).
- export PATH="$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")"
- HC=${CC}
- HCPKG=${HC/ghc/ghc-pkg}
- PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$PATH
- PKGNAME='llvm-hs'
- export CC=/usr/bin/$GCC
- export CXX=/usr/bin/$GXX
- export LD_LIBRARY_PATH=$HOME/llvm-build-${LLVM_VERSION}/lib:$LD_LIBRARY_PATH
- export PATH=$HOME/llvm-build-${LLVM_VERSION}/bin:$PATH
- mkdir -p $HOME/bin
- export PATH=$HOME/bin:$PATH

install:
# Build LLVM:
- curl https://cmake.org/files/v3.9/cmake-3.9.2-Linux-x86_64.tar.gz | tar -xzf - -C $HOME
- export PATH=$HOME/cmake-3.9.2-Linux-x86_64/bin:$PATH
- curl -L https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip -o ninja-linux.zip
- unzip ninja-linux.zip -d $HOME/bin
- curl http://releases.llvm.org/${LLVM_VERSION}/llvm-${LLVM_VER}.src.tar.xz | tar -xJf - -C $HOME
- rsync -ac $HOME/llvm-${LLVM_VERSION}.src/ $HOME/llvm-src-${LLVM_VER}
- cd $HOME/llvm-src-${LLVM_VERSION}
- mkdir -p build && cd build
- cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/llvm-build-${LLVM_VERSION} -DLLVM_PARALLEL_LINK_JOBS=1 -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_BUILD_LLVM_DYLIB=True -DLLVM_LINK_LLVM_DYLIB=True -GNinja ..
- ninja -j4 install
- cd $TRAVIS_BUILD_DIR
- ln -s $HOME/llvm-build-${LLVM_VERSION}/bin/llvm-config $HOME/bin/llvm-config
- llvm-config --version
- $GCC --version
- $GXX --version
# Build craeft.
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  case "$BUILD" in
    stack)
      stack --no-terminal --install-ghc $ARGS test --only-dependencies
      ;;
    cabal)
      cabal --version
      travis_retry cabal update
      cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS
      ;;
  esac

script:
- |
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS test
      ;;
  esac
